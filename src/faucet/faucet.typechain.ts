/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type { Event, EventFilter } from "ethers";
  
  export interface TypedEvent<
    TArgsArray extends Array<any> = any,
    TArgsObject = any
  > extends Event {
    args: TArgsArray & TArgsObject;
  }
  
  export interface TypedEventFilter<_TEvent extends TypedEvent>
    extends EventFilter {}
  
  export interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
  }
  
  type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
  
  export interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>,
      listener: TypedListener<TEvent>
    ): TRes;
    (eventName: string, listener: Listener): TRes;
  }
  
  export type MinEthersFactory<C, ARGS> = {
    deploy(...a: ARGS[]): Promise<C>;
  };
  
  export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
    infer C,
    any
  >
    ? C
    : never;
  
  export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
    ? Parameters<F["deploy"]>
    : never;
  
  export type PromiseOrValue<T> = T | Promise<T>;
  
  export declare namespace RestrictedUsage {
    export type ActorStruct = {
      name: PromiseOrValue<BytesLike>;
      addr: PromiseOrValue<string>;
    };
  
    export type ActorStructOutput = [string, string] & {
      name: string;
      addr: string;
    };
  }
  
  export declare namespace SignatureRecipient {
    export type SignatureStruct = {
      v: PromiseOrValue<BigNumberish>;
      r: PromiseOrValue<BytesLike>;
      s: PromiseOrValue<BytesLike>;
    };
  
    export type SignatureStructOutput = [number, string, string] & {
      v: number;
      r: string;
      s: string;
    };
  }
  
  export interface FaucetInterface extends utils.Interface {
    functions: {
      "dispense((bytes32,address),(uint8,bytes32,bytes32),uint64)": FunctionFragment;
      "flush()": FunctionFragment;
      "owner()": FunctionFragment;
      "portion()": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "signer()": FunctionFragment;
      "token()": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "trust(address)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "dispense"
        | "flush"
        | "owner"
        | "portion"
        | "renounceOwnership"
        | "signer"
        | "token"
        | "transferOwnership"
        | "trust"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "dispense",
      values: [
        RestrictedUsage.ActorStruct,
        SignatureRecipient.SignatureStruct,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(functionFragment: "flush", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "portion", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "signer", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "trust",
      values: [PromiseOrValue<string>]
    ): string;
  
    decodeFunctionResult(functionFragment: "dispense", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "portion", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "trust", data: BytesLike): Result;
  
    events: {
      "OwnershipTransferred(address,address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  }
  
  export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
  }
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export interface Faucet extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: FaucetInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      dispense(
        actor: RestrictedUsage.ActorStruct,
        sig: SignatureRecipient.SignatureStruct,
        deadline: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      flush(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      portion(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      signer(overrides?: CallOverrides): Promise<[string]>;
  
      token(overrides?: CallOverrides): Promise<[string]>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      trust(
        signer_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
    };
  
    dispense(
      actor: RestrictedUsage.ActorStruct,
      sig: SignatureRecipient.SignatureStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    flush(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    portion(overrides?: CallOverrides): Promise<BigNumber>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    token(overrides?: CallOverrides): Promise<string>;
  
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    trust(
      signer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      dispense(
        actor: RestrictedUsage.ActorStruct,
        sig: SignatureRecipient.SignatureStruct,
        deadline: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      flush(overrides?: CallOverrides): Promise<void>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      portion(overrides?: CallOverrides): Promise<BigNumber>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      signer(overrides?: CallOverrides): Promise<string>;
  
      token(overrides?: CallOverrides): Promise<string>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      trust(
        signer_: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "OwnershipTransferred(address,address)"(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
    };
  
    estimateGas: {
      dispense(
        actor: RestrictedUsage.ActorStruct,
        sig: SignatureRecipient.SignatureStruct,
        deadline: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      flush(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      portion(overrides?: CallOverrides): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      signer(overrides?: CallOverrides): Promise<BigNumber>;
  
      token(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      trust(
        signer_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      dispense(
        actor: RestrictedUsage.ActorStruct,
        sig: SignatureRecipient.SignatureStruct,
        deadline: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      flush(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      portion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      trust(
        signer_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  